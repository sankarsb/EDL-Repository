---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'This Stack created, IAM USers, Policies and Roles needed for Data Lake Formation'
Parameters:
  Environment:
    Description: Environment Name
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  ResourcePrefix:
    Description: S3 bucket prefix for file storage
    Type: String
    Default: doit-edl
  SourceAgencyS3BucketName:
    Description: Source Data Source  S3 bucket name
    Type: String
    Default: source-s3-bucket
  DataLakeDatabaseName:
    Description: Name of the DataLake Database Name
    Type: String
    Default: source-database
  DataLakeCrawlerName:
    Description: Name of the Data Lake Crawler Name
    Type: String
    Default: soruce-data-crawler

Resources:
  #1. Running Crawler - WIll creates tables Metadata 
  #2, Dta processing will be done by Glue Job including ETL process
  #3. Finally we need to load the data processed by Glue Job to S3/RDS/DynamoDB.
  
  # Get Source File name and name the resources accordingly
  # Create "Analyst user"
  # Parameterize thse reources
  
  # Registering the S3 Location with datalake
  LFDataLakeLocation:
    Type: AWS::LakeFormation::Resource
    Properties: 
      ResourceArn: !Sub 'arn:aws:s3:::${ResourcePrefix}-${Environment}-${SourceAgencyS3BucketName}'
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lakeformation.amazonaws.com/AWSServiceRoleForLakeFormationDataAccess'
      UseServiceLinkedRole: true
  
  # Assigning the Lake Data Adminitration when we start the Data Lake in the console
  LFDataLakeSettings:
    Type: AWS::LakeFormation::DataLakeSettings
    Properties:
      Admins:
        - DataLakePrincipalIdentifier: !Sub "arn:aws:iam::${AWS::AccountId}:user/doit-edl-data-lake-admin"
  
  # Creating Database for Glue Catalog
  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput: 
        Description: "Glue database to get s3 un processed data"
        Name:  !Sub '${ResourcePrefix}-${Environment}-${DataLakeDatabaseName}'
        LocationUri: !Sub '${ResourcePrefix}-${Environment}-${SourceAgencyS3BucketName}'
 
  #Creating Crawler for Glue Catalog      
  GlueCrawler:
    Type: AWS::Glue::Crawler
    DependsOn: GlueDatabase
    Properties:
      Name: !Sub '${ResourcePrefix}-${Environment}-${DataLakeCrawlerName}'
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/doit-edl-LakeFormationWorkflowRole"
      DatabaseName: !Ref GlueDatabase
      #Classifiers:
      #  - !Ref MyClassifier
      Targets:
        S3Targets:
          - Path: !Sub '${ResourcePrefix}-${Environment}-${SourceAgencyS3BucketName}'
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Schedule:
        ScheduleExpression: "cron(0/10 * ? * SAT *)"
  
  # Grants Permissions to A ROLE (doit-edl-LakeFormationWorkflowRole1) on the database. Like this you can give the permission to USER (Data Anaytic user)as well
  LFGrantDatabasePermissions:
    DependsOn: GlueDatabase
    Type: AWS::LakeFormation::Permissions
    Properties:
        DataLakePrincipal: 
          DataLakePrincipalIdentifier: !Sub "arn:aws:iam::${AWS::AccountId}:role/doit-edl-LakeFormationWorkflowRole"
        Permissions:
          - CREATE_TABLE
          - ALTER
          - DROP
          - DESCRIBE
        PermissionsWithGrantOption:
          - CREATE_TABLE
          - DROP
          - DESCRIBE
        Resource: 
          DatabaseResource: 
            CatalogId: !Sub ${AWS::AccountId} 
            Name: !Sub '${ResourcePrefix}-${Environment}-${DataLakeDatabaseName}'
  
  
  # Grants Permissions to A ROLE on a table
  # LFGrantTablePermissionsToDLAdminUser:
  #   Type: AWS::LakeFormation::Permissions
  #   Properties:
  #       DataLakePrincipal: 
  #         DataLakePrincipalIdentifier: 
  #           'arn:aws:iam::${AWS::AccountId}:user/data-lake-admin'
  #       Permissions:
  #         - SELECT
  #         - DESCRIBE
  #       PermissionsWithGrantOption:
  #         - SELECT
  #         - DESCRIBE
  #       Resource: 
  #         TableResource:
  #           CatalogId: 
  #             !Sub ${AWS::AccountId}
  #           DatabaseName: 
  #             dlf-ingest
  #           Name: 
  #             sales
              
  # Grants Permissions to A ROLE on a location (Registred S3 location)
  LFGrantLocationPermissions:
    DependsOn:  LFDataLakeLocation
    Type: AWS::LakeFormation::Permissions
    Properties:
        DataLakePrincipal: 
          DataLakePrincipalIdentifier: 
            !Sub 'arn:aws:iam::${AWS::AccountId}:role/doit-edl-LakeFormationWorkflowRole'
        Resource:
          DataLocationResource:
              CatalogId: !Sub ${AWS::AccountId}
              S3Resource: !Sub 'arn:aws:s3:::${ResourcePrefix}-${Environment}-${SourceAgencyS3BucketName}'

 
  # Grants Permissions to a Datalake ADmin User
  LFGrantDatabasePermissionsToDLAdminUser:
    DependsOn: GlueDatabase
    Type: AWS::LakeFormation::Permissions
    Properties:
        DataLakePrincipal: 
          DataLakePrincipalIdentifier: !Sub "arn:aws:iam::${AWS::AccountId}:user/doit-edl-data-lake-admin"
        Permissions:
          - CREATE_TABLE
          - ALTER
          - DROP
          - DESCRIBE
        PermissionsWithGrantOption:
          - CREATE_TABLE
          - DROP
          - DESCRIBE
        Resource: 
          DatabaseResource: 
            CatalogId: !Sub ${AWS::AccountId} 
            Name: !Sub '${ResourcePrefix}-${Environment}-${DataLakeDatabaseName}'
 
 # Grants Permissions to a Datalake Admin User
  LFGrantLocationPermissionsToDLAdminUser:
    DependsOn:  LFDataLakeLocation
    Type: AWS::LakeFormation::Permissions
    Properties:
        DataLakePrincipal: 
          DataLakePrincipalIdentifier: 
            !Sub "arn:aws:iam::${AWS::AccountId}:user/doit-edl-data-lake-admin"
        Resource:
          DataLocationResource:
              CatalogId: !Sub ${AWS::AccountId}
              S3Resource: !Sub 'arn:aws:s3:::${ResourcePrefix}-${Environment}-${SourceAgencyS3BucketName}'

